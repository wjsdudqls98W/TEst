Redis

C:\Program Files\Redis>redis-cli - redis들어가기
set test1 value100 - 만들기
mset - 여러개 만들기
keys * - 모든 키 보기 ex) test1
get test1 - 값 조회 ex)value100
mget test1 test2 - 여러개 값 조회
del data3 - 삭제 ex)data3 삭제
flushall - 전체 삭제
expire data10 20 - 만료시간 만들기 ex)data10 20초
ttl test1 - 만료시간 보기



[Redis]
Remote Dictionary Storage
- 메모리 기반의 데이터 저장소이고 휘발성
- 메모리에 저장하므로 빠름
- 싱글쓰레드
- key-value의 형식으로 저장하는 것을 지원

0. string에서 redis를 사용하는 방법
     1) RedisTemplate
     2) spring-data에서 제공하는 Repository를 이용해서 작업
       - JPA작업과 동일

1. Redis에서 사용할 수 있는 데이터타입
   1) Strings
      1:1로 처리할 수 있는 데이터
   2) Lists
      순서가 있는 데이터 집합
   3) JSON
   4) Sets
      순서와 관계없이 데이터를 관리
      중복불가능
   5) Sorted Set
      Set과 동일한 순서를 관리
      score라는 개념이 존재하고 이를 통해 소트된 데이터를 관리할 수 있다.
   6) Hashes
      field와 value가 존재하는 구조, RDBMS의 table개념
      RDB에 바로 저장하거나 RDB의 캐쉬를 사용하거나 하는 경우 많이 사용

2. String
3. Set
   - String의 집합
   - 정렬이 적용되어 있지 않은 집합
   - 중복된 데이터는 존재하지 않는다.
   - Redis에서는 Set에 저장된 값들을 멤버(member)라 부른다.
    1) 메소드
        sadd : set에 데이터를 추가
           [문법]
        sadd key value
        sadd key value1 value2 calue3 ....

        scard : set에 저장된 요소들의 갯수를 리턴
            [문법]
         scard key

     smembers : 지정한 키에 저장된 모든 요소를 출력
            [문법]
         smembers key

     sismember : 해당 멤버가 지정한 키에 해당하는 set에 있는지 여부를 검사
            [문법]
         sismerber key 찾고싶은 요소
              => 해당요소가 set에 저장되어 있으면 1을 반환하고 없으면 0을 반환

       srem : set에 저장된 요소 중 지정한 요소와 일치하는 것을 삭제
             [문법]
         srem key 삭제할요소
              => 삭제가 완료되면 1을 반환,  삭제할 요소가 없으면 0을 반환

4. Hashes
   - 딕셔너리나 맴과 유사한 기능
   - key하위에 subkey를 이용해서 작업할 수 있다.
   - 필드와 value를 추가해서 사용
   - 관계형데이터베이스에서 테이블을 표현할 수 있다.
   - 필드로 표현(매모리가 허용하는 범위에서 제한없이 저장)
   - 로그인세션을 저장하기 위해 사용

   1) 메소드
         hset
       => 데이터 저장(단일데이터)
       [문법]
       hset key field(subkey) value

         hmset
       => 데이터 저장(데이터 여러 개 저장)
       [문법]
       hmset key field(subkey) value[field(subkey) value, field(subkey) value, .....]

         hdel
       => 입력한 키에 필드를 삭제
       [문법]
       hdel key 삭제할 필드

         del
       => 키에 해당하는 hash를 삭제
       [문법]
           del key

         hget
       => 필드값 읽기, 없는 경우 nil
       [문법]
           hget key field

         hmget
       => 여러 개 필드값 읽기, 없는 경우 nil
       [문법]
           hmget key field1,field2,.....

         hgetall
       => 입력한 키에 해당하는 해쉬에 저장된 모든 필드의 값과 필드를 반환
       [문법]
       hgetall key

         hlen


5. Sorted Set(Zset)
   - 저장된 데이터를 유니크하게 관리하기 위해서 사용
   - zadd, zcard, zrange, zrangebyscore, zrem, zscore, zrank
   - 단순 key,value의 개념은 아니고 redis의 sorted set에서는 key,score,member의
        개념이 존재
       * key : zset을 구분할 수 있는 값
               -----
                key와 value를 가지고 있다.
       * score : value
       * member : zset내부의 저장되는 데이터를 구분할 수 있는 키(member는 유니크)

   - score를 이용해서 zset내부에서 원소들의 순서를 결정
     1) 메소드
            zadd
           - 요소를 sorted set에 저장
           - key는 하나의 zset에 부여되는 구분값
           - zset은 key value를 갖고 있는 데이터들을 관리
           - key는 member, value가 score
           - member는 sorted set에서 요소를 구분하는 값으로 유니크
           - score를 판단해서 순서를 적용
           [문법]
            zadd key score member
                     ----- ------
                     값      sorted set에 저장된 요소를 구분하기 위한 키값

        zcard

        zrange
            - sorted set내부에 저장된 정렬된 원소에서 내가 출력하고 싶은 start번호와
                      stop번호를 정의해서 가져오기
            - 양수음수 값을 start와 stop에 정의할 수 있다.
            [문법]
             zrange key start stop

        zrangebyscore
            - 특정 범위에 해당하는 member들을 조회
             [문법]
             zrangebyscore key minvalue maxvalue
             157000원에서 200000원 사이의값을 가지고 있는 멤버 조회 - zrangebyscore outer 157000 200000 withscores
             157000초과 200000미만- zrangebyscore outer (157000 (200000 withscores

        zrem
            - 해당 키의 member를 삭제
            [문법]
             zrem key member
        zscore
            - sorted set에서 지정한 member의 값
            [문법]   
             zscore key member_key
        zrank
            - 오름차순으로 정렬된 sorted set에서 지정한 member의 순위
            [문법]
             zrank key member_key

6. Lists
   - String을 Rinkedlist로 저장하는 구조
   - 각노드들이 이전노드와 다음노드를 참조할 수 있는 주소를 가지고 있다. 
   - 양 끝에 데이터를 추가하거나 삭제하는 작업을 할 수 있도록 지원
   - Queue나 Stack의 구조를 표현할 수 있다.
   - 선형구조로 사용할 수 있도록 index가 부여된다.

   1) 메소드
      lpush
        => List에 저장
        [문법]
        lpush key value1
        lpush key value1 value2 value3 ....

      lpop
        => 가장 마지막에 저장한 데이터를 제거
        [문법]
            lpop key

      rpop
        => 가장 먼저 저장한 데이터를 제거
        [문법]
            rpop key

      llen
        => List의 길이를 리턴
        [문법]
            llen key

      ltrim
        => index범위의 데이터를 제거
        [문법]
        ltrim key startindex endindex

      lrange
        => index범위의 데이터를 조회하기
        [문법]
        lrange key startindex endindex

7. Bitmaps
   => bit를 셋팅해서 작업
   => 날짜별로 유저들이 로그인 유무를 검사하거나 true/false등으로 비교되는 단순값
   setbit key offset value
              ------  -----
                |        |
       구분할 수 있는      0또는 1의 비트값(기본이 0)
       값을 0보다 큰정수

    getbit key
       => 특정 offset에 셋팅된 값을 반한

8. hyperloglog
   - 집합과 같이 중복된 데이터가 없어야 하는 경우 작업
   - 오차가 발생할 수 있다.
   - 100% 정확성이 필요하지 않는 근사치 작업을 하는 경우 사용
   - 저장공간을 효율적으로 다룰 수 있다.
   - 방문자수 체크
     pfadd key 값1 값2 ....
      => 추가
     pfcount key
      => 갯수리턴
     
9. Geospatial
   => 좌표저장하고 좌표를 검색하고 거리계산 범위탐색등을 지원하는 데이터타입
   => 위도 경도를 등록할때 경도를 먼저 앞에 추가해야 한다.

   1) 좌표추가
      geoadd key 경도 위도

[redis사용전]

1. 기준 위도 경도를 넘기며 요청
2. DBMS에서 전체데이터 조회
3. 기준 위치에서 반경 2km안에 있는 데이터를 추출
4. 기준데이터를 클라이언트로 전송

[redis사용후]

1. 기준 위도 경도를 넘기며 요청
2. 지점데이터를 redis에서 조회
    1) DB데이터를 redis에 저장
        => store키를 갖는 해쉬생성
        => 해쉬에 서브키를 store레코드 기본키
        => 나머지 store의 모든 정보를 json문자열로 변환해서 저장
        => 기준을 정해놓고 기준에 맞게 작업(스프링스케쥴러)

   2) 해쉬에서 json문자열로 저장된 데이터를 꺼내서 dto로 변환
      
3. redis가 장애인 경우 DB에서 조회할 수 있도록
    => 조회할 데이터가 없거나 요류가 발생하거나 

4. 기준 위치에서 반경 2km안에 있는 데이터를 추출
    => 조회된 데이터를 redis에서 geospatial을 이용해서 처리할 수 있다.

5. 기준데이터를 클라이언트로 전송


[작업순서]
1. config정의
2. redis에 데이터를 저장하고 조회할 수 있는 메소드를 정의
    service클래스
3. 컨트롤러정의
















